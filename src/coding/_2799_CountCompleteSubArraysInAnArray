package coding;
import java.util.*;

import java.util.*;

public class _2799_CountCompleteSubArraysInAnArray {

    public static void main(String[] args) {
        var lists = process(new int[]{1, 1});

        System.out.println("prefix sum from interval i to j :"+processV2());

        System.out.println("-----------------processV3");

        System.out.println(processV3(new int[] {1, 3 , 1 , 2 ,2}));

    }

    private static List<Integer> process(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();

        List<Integer> list = new ArrayList<>();

        for (int i = 0; i < nums.length; ++i) {

            map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
        }

        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {

            if (entry.getValue() > 1) {
                list.add(entry.getKey());
            }

        }

        return list;
    }

    private static int processV2() {

        int[] nums = {1, 2, 3, 4, 5};

        int[] prefixSum = new int[nums.length + 1];

        for (int i = 0; i < nums.length; i++) {
            prefixSum[i + 1] = prefixSum[i] + nums[i];
        }

        int i = 1, j = 3;
        int sum = prefixSum[j + 1] - prefixSum[i];

        // prefixSum (i + 1) - prefixSum (j)

        System.out.println("sum index from "+i+" to "+j+" is: "+sum);

        return sum;
    }

    private static int processV3(int[] nums) {
        Set<Integer> uniqueValue = new HashSet<>();

        for (int num : nums) {
            uniqueValue.add(num);
        }

        int requireSize = uniqueValue.size();
        Map<Integer, Integer> map = new HashMap<>();
        int totalCount = 0;
        int start = 0;

        for (int end = 0; end < nums.length; end++) {
            map.put(nums[end], map.getOrDefault(nums[end], 0) + 1);

            while (map.size() == requireSize) {
                totalCount += (nums.length - end);

                // rut gon mang con tu ben trai
                map.put(nums[start], map.get(nums[start]) - 1);

                if (map.get(nums[start]) == 0) {
                    map.remove(nums[start]);
                }
                start++;
            }
        }

        return totalCount;
    }

}
